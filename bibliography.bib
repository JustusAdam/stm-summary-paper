% Encoding: UTF-8

@Article{research-toy,
  author     = {Cascaval, Calin and Blundell, Colin and Michael, Maged and Cain, Harold W. and Wu, Peng and Chiras, Stefanie and Chatterjee, Siddhartha},
  title      = {{Software Transactional Memory: Why Is It Only a Research Toy?}},
  journal    = {Queue},
  year       = {2008},
  volume     = {6},
  number     = {5},
  pages      = {40:46--40:58},
  month      = sep,
  issn       = {1542-7730},
  acmid      = {1454466},
  address    = {New York, NY, USA},
  articleno  = {40},
  doi        = {10.1145/1454456.1454466},
  issue_date = {September 2008},
  numpages   = {13},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/1454456.1454466},
}

@Article{not-research-toy,
  author     = {Dragojevi\'{c}, Aleksandar and Felber, Pascal and Gramoli, Vincent and Guerraoui, Rachid},
  title      = {{Why STM Can Be More Than a Research Toy}},
  journal    = {Commun. ACM},
  year       = {2011},
  volume     = {54},
  number     = {4},
  pages      = {70--77},
  month      = apr,
  issn       = {0001-0782},
  acmid      = {1924440},
  address    = {New York, NY, USA},
  doi        = {10.1145/1924421.1924440},
  issue_date = {April 2011},
  numpages   = {8},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/1924421.1924440},
}

@InProceedings{composable-transactions,
  author    = {Harris, Tim and Marlow, Simon and Peyton-Jones, Simon and Herlihy, Maurice},
  title     = {Composable Memory Transactions},
  booktitle = {Proceedings of the Tenth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
  year      = {2005},
  series    = {PPoPP '05},
  pages     = {48--60},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1065952},
  doi       = {10.1145/1065944.1065952},
  isbn      = {1-59593-080-9},
  keywords  = {locks, non-blocking algorithms, transactions},
  location  = {Chicago, IL, USA},
  numpages  = {13},
  url       = {http://doi.acm.org/10.1145/1065944.1065952},
}

@Article{stm,
  author   = {Shavit, Nir and Touitou, Dan},
  title    = {Software transactional memory},
  journal  = {Distributed Computing},
  year     = {1997},
  volume   = {10},
  number   = {2},
  pages    = {99--116},
  month    = {Feb},
  issn     = {1432-0452},
  abstract = {{\enspace}As we learn from the literature, flexibility in choosing synchronization operations greatly simplifies the task of designing highly concurrent programs. Unfortunately, existing hardware is inflexible and is at best on the level of a Load--Linked/Store--Conditional operation on a single word. Building on the hardware based transactional synchronization methodology of Herlihy and Moss, we offer software transactional memory (STM), a novel software method for supporting flexible transactional programming of synchronization operations. STM is non-blocking, and can be implemented on existing machines using only a Load--Linked/Store--Conditional operation. We use STM to provide a general highly concurrent method for translating sequential object implementations to non-blocking ones based on implementing a k-word compare{\&}swap STM-transaction. Empirical evidence collected on simulated multiprocessor architectures shows that our method always outperforms the non-blocking translation methods in the style of Barnes, and outperforms Herlihy's translation method for sufficiently large numbers of processors. The key to the efficiency of our software-transactional approach is that unlike Barnes style methods, it is not based on a costly ``recursive helping'' policy.},
  day      = {01},
  doi      = {10.1007/s004460050028},
  url      = {https://doi.org/10.1007/s004460050028},
}

@InProceedings{tm-origins,
  author    = {Herlihy, Maurice and Moss, J. Eliot B.},
  title     = {Transactional Memory: Architectural Support for Lock-free Data Structures},
  booktitle = {Proceedings of the 20th Annual International Symposium on Computer Architecture},
  year      = {1993},
  series    = {ISCA '93},
  pages     = {289--300},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {165164},
  doi       = {10.1145/165123.165164},
  isbn      = {0-8186-3810-9},
  location  = {San Diego, California, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/165123.165164},
}

@InProceedings{lock-free-structures-haskell-stm,
  author    = {Discolo, Anthony and Harris, Tim and Marlow, Simon and Jones, Simon Peyton and Singh, Satnam},
  title     = {Lock Free Data Structures Using STM in Haskell},
  booktitle = {Functional and Logic Programming},
  year      = {2006},
  editor    = {Hagiya, Masami and Wadler, Philip},
  pages     = {65--80},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {This paper explores the feasibility of re-expressing concurrent algorithms with explicit locks in terms of lock free code written using Haskell's implementation of software transactional memory. Experimental results are presented which show that for multi-processor systems the simpler lock free implementations offer superior performance when compared to their corresponding lock based implementations.},
  isbn      = {978-3-540-33439-2},
}

@InProceedings{stm-in-concurrent-haskell,
  author    = {Huch, Frank and Kupke, Frank},
  title     = {A High-Level Implementation of Composable Memory Transactions in Concurrent Haskell},
  booktitle = {Implementation and Application of Functional Languages},
  year      = {2006},
  editor    = {Butterfield, Andrew and Grelck, Clemens and Huch, Frank},
  pages     = {124--141},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {Composable memory transactions are a new communication abstraction for Concurrent Haskell which provides the programmer with a composable communication concept. Unfortunately, composable memory transactions are implemented as external functions for ghc version 6.4 and not available for other implementations of Concurrent Haskell. We present an implementation of memory transactions within Concurrent Haskell. The presented library can be executed within older ghc versions as well as with the popular Hugs system. Benchmarks show that our library performes well. Furthermore, our (high-level) implementation can be extended and maintained more easily than the low-level implementation provided by ghc 6.4.},
  isbn      = {978-3-540-69175-4},
}

@InProceedings{transactional-memory-data-invariants,
  author    = {Harris, Tim and Peyton Jones, Simon},
  title     = {Transactional memory with data invariants},
  booktitle = {First ACM SIGPLAN Workshop on Languages, Compilers, and Hardware Support for Transactional Computing (TRANSACTâ€™06), Ottowa},
  year      = {2006},
  volume    = {92},
  month     = {June},
  abstract  = {This paper introduces a mechanism for asserting invariants that are maintained by a program that uses atomic memory transactions. The idea is simple: a programmer writes check E where E is an expression that should be preserved by every atomic update for the remainder of the program's execution. We have extended STM Haskell to dynamically evaluate check statements atomically with the user's updates: the result is that we can identify precisely which update is the first one to break an invariant.},
  url       = {https://www.microsoft.com/en-us/research/publication/transactional-memory-data-invariants/},
}

@InProceedings{concurrent-haskell,
  author    = {Jones, Simon Peyton and Gordon, Andrew and Finne, Sigbjorn},
  title     = {Concurrent haskell},
  booktitle = {POPL},
  year      = {1996},
  volume    = {96},
  pages     = {295--308},
}

@Misc{stm-as-dep-on-stackage,
  title     = {Reverse depenencies for the stm library},
  month     = sep,
  year      = {2018},
  timestamp = {2018-08-23},
  url       = {https://www.stackage.org/lts-12.7/package/stm-2.4.5.0},
}

@Misc{directory-as-dep-on-stackage,
  title     = {Reverse dependencies for the directory package},
  month     = sep,
  year      = {2018},
  timestamp = {2018-08-23},
  url       = {https://www.stackage.org/lts-12.7/package/directory-1.3.1.5},
}

@InProceedings{hardware-accelerated-stm,
  author    = {B. Saha and A. Adl-Tabatabai and Q. Jacobson},
  title     = {Architectural Support for Software Transactional Memory},
  booktitle = {2006 39th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO'06)},
  year      = {2006},
  pages     = {185-196},
  month     = {Dec},
  doi       = {10.1109/MICRO.2006.9},
  issn      = {1072-4451},
  keywords  = {concurrency control;data structures;instruction sets;storage management;synchronisation;transaction processing;concurrency control;lock-based synchronization;hardware transactional memory;transactional semantics;stock processor;instruction set architecture;hardware accelerated software transactional memory;Hardware;Acceleration;Instruction sets;Proposals;Concurrency control;Runtime;Yarn;Programming profession;Optimizing compilers;Object detection},
}

@InProceedings{htm-with-stm-fallback,
  author    = {Kumar, Sanjeev and Chu, Michael and Hughes, Christopher J. and Kundu, Partha and Nguyen, Anthony},
  title     = {Hybrid Transactional Memory},
  booktitle = {Proceedings of the Eleventh ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
  year      = {2006},
  series    = {PPoPP '06},
  pages     = {209--220},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1123003},
  doi       = {10.1145/1122971.1123003},
  isbn      = {1-59593-189-9},
  keywords  = {architecture support, nonblocking, transactional memory, transactions},
  location  = {New York, New York, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/1122971.1123003},
}

@InProceedings{sle,
  author    = {Rajwar, Ravi and Goodman, James R.},
  title     = {Speculative Lock Elision: Enabling Highly Concurrent Multithreaded Execution},
  booktitle = {Proceedings of the 34th Annual ACM/IEEE International Symposium on Microarchitecture},
  year      = {2001},
  series    = {MICRO 34},
  pages     = {294--305},
  address   = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid     = {564036},
  isbn      = {0-7695-1369-7},
  location  = {Austin, Texas},
  numpages  = {12},
  url       = {http://dl.acm.org/citation.cfm?id=563998.564036},
}

@InProceedings{hle,
  author    = {Afek, Yehuda and Levy, Amir and Morrison, Adam},
  title     = {Programming with Hardware Lock Elision},
  booktitle = {Proceedings of the 18th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
  year      = {2013},
  series    = {PPoPP '13},
  pages     = {295--296},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2442552},
  doi       = {10.1145/2442516.2442552},
  isbn      = {978-1-4503-1922-5},
  keywords  = {hardware lock elision, haswell, speculative execution},
  location  = {Shenzhen, China},
  numpages  = {2},
  url       = {http://doi.acm.org/10.1145/2442516.2442552},
}

@Article{mpi-paradigm,
  author  = {Agha, Gul},
  title   = {A message-passing paradigm for object management},
  journal = {IEEE Database Eng. Bull.},
  year    = {1985},
  volume  = {8},
  number  = {4},
  pages   = {75--82},
}

@PhdThesis{actors,
  author = {Agha,Gul A.},
  title  = {{Actors: A Model of Concurrent Computation in Distributed Systems.}},
  school = {MIT},
  year   = {1985},
  month  = aug,
}

@Misc{akka,
  author   = {BonÃ©r, Jonas},
  title    = {Akka},
  month    = jul,
  year     = {2009},
  abstract = {Akka is a toolkit for building highly concurrent, distributed, and resilient message-driven applications for Java and Scala},
  url      = {https://akka.io},
}

@Misc{erlang,
  author = {Armstrong Joe and Virding, Robert and and Williams, Mike},
  title  = {Erlang},
  year   = {1986},
  url    = {https://www.erlang.org},
}

@Comment{jabref-meta: databaseType:bibtex;}
